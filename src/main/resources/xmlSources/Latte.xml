<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE latte PUBLIC "-//LATTE//Latte plugin XML V0.0.1//EN" "Latte.dtd">
<latte vendor="latte" version="1">
	<tags>
		<tag name="_" type="AUTO_EMPTY" allowedFilters="true">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="=" type="UNPAIRED" allowedFilters="true">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="block" type="AUTO_EMPTY" allowedFilters="true" multiLine="true">
			<arguments>
				<argument name="name" types="PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="breakIf" type="UNPAIRED">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" validType="bool" required="true" />
			</arguments>
		</tag>
		<tag name="capture" type="PAIR" allowedFilters="true" multiLine="true">
			<arguments>
				<argument name="variable" types="VARIABLE_DEFINITION" required="true" />
			</arguments>
		</tag>
		<tag name="case" type="UNPAIRED">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" required="true" repeatable="true" />
			</arguments>
		</tag>
		<tag name="catch" type="UNPAIRED">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" validType="bool" required="true" />
			</arguments>
		</tag>
		<tag name="contentType" type="UNPAIRED">
			<arguments>
				<argument name="content-type" types="CONTENT_TYPE" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="continueIf" type="UNPAIRED">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" validType="bool" required="true" />
			</arguments>
		</tag>
		<tag name="debugbreak" type="UNPAIRED">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" required="true" />
			</arguments>
		</tag>
		<tag name="default" type="UNPAIRED">
			<arguments>
				<argument name="variable" types="VARIABLE_DEFINITION_EXPRESSION" required="true" repeatable="true" />
			</arguments>
		</tag>
		<tag name="parameters" type="UNPAIRED">
			<arguments>
				<argument name="parameter" types="VARIABLE_DEFINITION_EXPRESSION" required="true" repeatable="true" />
			</arguments>
		</tag>
		<tag name="define" type="PAIR" multiLine="true">
			<arguments>
				<argument name="name" types="PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION" required="true" />
				<argument name="variable" types="VARIABLE_DEFINITION_ITEM" repeatable="true" />
			</arguments>
		</tag>
		<tag name="do" type="UNPAIRED">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" required="true" />
			</arguments>
		</tag>
		<tag name="dump" type="UNPAIRED">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" required="true" />
			</arguments>
		</tag>
		<tag name="else" type="UNPAIRED_ATTR" />
		<tag name="elseif" type="UNPAIRED">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" validType="bool" required="true" />
			</arguments>
		</tag>
		<tag name="elseifset" type="UNPAIRED">
			<arguments>
				<argument name="var" types="VARIABLE,BLOCK" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="extends" type="UNPAIRED">
			<arguments>
				<argument name="file" types="PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION,NONE" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="first" type="PAIR">
			<arguments>
				<argument name="width" types="PHP_IDENTIFIER,PHP_EXPRESSION" validType="int" required="true" />
			</arguments>
		</tag>
		<tag name="for" type="PAIR" arguments="initialization; condition; afterthought" multiLine="true" />
		<tag name="foreach" type="PAIR" arguments="expression as [$key =>] $value" allowedFilters="true" multiLine="true" />
		<tag name="if" type="PAIR">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" validType="bool" required="true" />
			</arguments>
		</tag>
		<tag name="ifset" type="PAIR">
			<arguments>
				<argument name="var" types="VARIABLE,BLOCK,PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="import" type="UNPAIRED">
			<arguments>
				<argument name="file" types="PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="include" type="UNPAIRED" allowedFilters="true">
			<arguments>
				<argument name="file" types="BLOCK,IDENTIFIER,PHP_EXPRESSION" validType="string" required="true" />
				<argument name="arguments" types="KEY_VALUE" repeatable="true" />
			</arguments>
		</tag>
		<tag name="includeblock" type="UNPAIRED">
			<arguments>
				<argument name="file" types="PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="l" type="UNPAIRED" />
		<tag name="last" type="PAIR">
			<arguments>
				<argument name="width" types="PHP_IDENTIFIER,PHP_EXPRESSION" validType="int" required="true" />
			</arguments>
		</tag>
		<tag name="layout" type="UNPAIRED">
			<arguments>
				<argument name="file" types="PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION,NONE" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="class" type="ATTR_ONLY" arguments="class" />
		<tag name="attr" type="ATTR_ONLY" arguments="attr" />
		<tag name="ifcontent" type="ATTR_ONLY" />
		<tag name="php" type="UNPAIRED">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" required="true" />
			</arguments>
		</tag>
		<tag name="r" type="UNPAIRED" />
		<tag name="sandbox" type="UNPAIRED">
			<arguments>
				<argument name="file" types="BLOCK,PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION" validType="string" required="true" />
				<argument name="key-value" types="KEY_VALUE" repeatable="true" />
			</arguments>
		</tag>
		<tag name="sep" type="PAIR">
			<arguments>
				<argument name="width" types="PHP_IDENTIFIER,PHP_EXPRESSION" validType="int" />
			</arguments>
		</tag>
		<tag name="snippet" type="PAIR" multiLine="true">
			<arguments>
				<argument name="name" types="PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION" validType="string" />
			</arguments>
		</tag>
		<tag name="snippetArea" type="PAIR" multiLine="true">
			<arguments>
				<argument name="name" types="PHP_IDENTIFIER,PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="spaceless" type="PAIR" />
		<tag name="switch" type="PAIR" multiLine="true">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" />
			</arguments>
		</tag>
		<tag name="syntax" type="PAIR" arguments="off | double | latte" multiLine="true" />
		<tag name="templatePrint" type="UNPAIRED">
			<arguments>
				<argument name="class-name" types="PHP_CLASS_NAME" />
			</arguments>
		</tag>
		<tag name="templateType" type="UNPAIRED">
			<arguments>
				<argument name="class-name" types="PHP_CLASS_NAME" required="true" />
			</arguments>
		</tag>
		<tag name="translate" type="AUTO_EMPTY" allowedFilters="true">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" validType="string" required="true" />
			</arguments>
		</tag>
		<tag name="try" type="PAIR" />
		<tag name="rollback" type="UNPAIRED" />
		<tag name="tag" type="ATTR_ONLY">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" required="true" validType="string" repeatable="true" />
			</arguments>
		</tag>
		<tag name="ifchanged" type="PAIR">
			<arguments>
				<argument name="expression" types="PHP_EXPRESSION" required="true" repeatable="true" />
			</arguments>
		</tag>
		<tag name="skipIf" type="UNPAIRED">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" validType="bool" required="true" />
			</arguments>
		</tag>
		<tag name="var" type="UNPAIRED">
			<arguments>
				<argument name="variable" types="VARIABLE_DEFINITION_EXPRESSION" required="true" repeatable="true" />
			</arguments>
		</tag>
		<tag name="trace" type="UNPAIRED" />
		<tag name="varPrint" type="UNPAIRED" arguments="all" />
		<tag name="varType" type="UNPAIRED">
			<arguments>
				<argument name="file" types="PHP_TYPE" required="true" />
				<argument name="variable" types="VARIABLE_DEFINITION" required="true" />
			</arguments>
		</tag>
		<tag name="while" type="PAIR" multiLine="true">
			<arguments>
				<argument name="condition" types="PHP_CONDITION" validType="bool" required="true" />
			</arguments>
		</tag>
		<tag name="iterateWhile" type="PAIR" multiLine="true" />
		<tag name="embed" type="PAIR" multiLine="true">
			<arguments>
				<argument name="file" types="BLOCK_USAGE,PHP_IDENTIFIER,VARIABLE,PHP_EXPRESSION" validType="string" required="true" />
				<argument name="key-value" types="KEY_VALUE" repeatable="true" />
			</arguments>
		</tag>
		<!-- @deprecated - latte -->
		<tag name="assign" type="UNPAIRED" arguments="$variable = expr" />
		<tag name="truncate" type="UNPAIRED" arguments="expression" deprecatedMessage="Tag {? ...} is deprecated in Latte 2.4. For variable definitions use {var ...} or {php ...} in other cases." />
	</tags>
	<filters>
		addLatteFilter("truncate", ":($length, $append = 'â€¦')", "shortens the length preserving whole words", ":");
		addLatteFilter("substr", ":($offset [, $length])", "returns part of the string", ":");
		addLatteFilter("trim", ":($charset = mezery)", "strips whitespace or other characters from the beginning and end of the string");
		addLatteFilter("stripHtml", "", "removes HTML tags and converts HTML entities to text");
		addLatteFilter("strip", "", "removes whitespace");
		addLatteFilter("indent", ":($level = 1, $char = '\t')", "indents the text from left with number of tabs");
		addLatteFilter("replace", ":($search, $replace = '')", "replaces all occurrences of the search string with the replacement", ":");
		addLatteFilter("replaceRE", ":($pattern, $replace = '')", "replaces all occurrences according to regular expression", ":");
		addLatteFilter("padLeft", ":($length, $pad = ' ')", "completes the string to given length from left", ":");
		addLatteFilter("padRight", ":($length, $pad = ' ')", "completes the string to given length from right", ":");
		addLatteFilter("repeat", ":($count)", "repeats the string", ":");
		addLatteFilter("implode", ":($glue = '')", "joins an array to a string");
		addLatteFilter("webalize", "adjusts the UTF-8 string to the shape used in the URL");
		addLatteFilter("breaklines", "inserts HTML line breaks before all newlines");
		addLatteFilter("reverse", "reverse an UTF-8 string or array");
		addLatteFilter("length", "returns length of a string or array");
		addLatteFilter("sort", "simply sorts array");
		addLatteFilter("reverse", "array sorted in reverse order (used with |sort)");
		addLatteFilter("batch", ":($array, $length [, $item])", "returns length of a string or array", "::");

		addLatteFilter("date", ":(int $min, int $max)", "returns value clamped to the inclusive range of min and max.", "::");

		addLatteFilter("lower", "makes a string lower case");
		addLatteFilter("upper", "makes a string upper case");
		addLatteFilter("firstUpper", "makes the first letter upper case");
		addLatteFilter("capitalize", "lower case, the first letter of each word upper case");

		addLatteFilter("date", ":($format)", "formats date", ":");
		addLatteFilter("number", ":($decimals = 0, $decPoint = '.', $thousandsSep = ',')", "format number");
		addLatteFilter("bytes", ":($precision = 2)", "formats size in bytes");
		addLatteFilter("dataStream", ":($mimetype = 'detect')", "Data URI protocol conversion");

		addLatteFilter("noescape", "prints a variable without escaping");
		addLatteFilter("escapeurl", "escapes parameter in URL");

		addLatteFilter("nocheck", "prevents automatic URL sanitization");
		addLatteFilter("checkurl", "sanitizes string for use inside href attribute");

		addLatteFilter("query", "generates a query string in the URL");
		addLatteFilter("ceil", ":(int $precision = 0)", "rounds a number up to a given precision");
		addLatteFilter("explode", ":(string $separator = '')", "splits a string by the given delimiter");
		addLatteFilter("first", "returns first element of array or character of string");
		addLatteFilter("floor", ":(int $precision = 0)", "rounds a number down to a given precision");
		addLatteFilter("join", ":(string $glue = '')", "joins an array to a string");
		addLatteFilter("last", "returns last element of array or character of string");
		addLatteFilter("random", "returns random element of array or character of string");
		addLatteFilter("round", ":(int $precision = 0)", "rounds a number to a given precision");
		addLatteFilter("slice", ":(int $start, int $length = null, bool $preserveKeys = false)", "extracts a slice of an array or a string", ":");
		addLatteFilter("spaceless", "removes whitespace");
		addLatteFilter("split", ":(string $separator = '')", "splits a string by the given delimiter");
	</filters>
	<functions>
		addNetteFunction("clamp", "int|float", "(int|float $value, int|float $min, int|float $max)", "clamps value to the inclusive range of min and max");
		addNetteFunction("divisibleBy", "bool", "(int $value)", "checks if a variable is divisible by a number");
		addNetteFunction("even", "bool", "(int $value)", "checks if the given number is even");
		addNetteFunction("first", "mixed", "(string|array $value)", "returns first element of array or character of string");
		addNetteFunction("last", "mixed", "(string|array $value)", "returns last element of array or character of string");
		addNetteFunction("odd", "bool", "(int $value)", "checks if the given number is odd");
		addNetteFunction("slice", "string|array", "(string|array $value, int $start, int $length = null, bool $preserveKeys = false)", "extracts a slice of an array or a string");
	</functions>
</latte>
